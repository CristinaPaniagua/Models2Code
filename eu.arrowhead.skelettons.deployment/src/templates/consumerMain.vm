package eu.arrowhead.${packagename};

import java.util.List;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;



import ai.aitia.arrowhead.application.library.ArrowheadService;
import eu.arrowhead.common.CommonConstants;
import eu.arrowhead.common.SSLProperties;
import eu.arrowhead.common.Utilities;
import eu.arrowhead.common.dto.shared.OrchestrationFlags.Flag;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO.Builder;
import eu.arrowhead.common.dto.shared.OrchestrationResponseDTO;
import eu.arrowhead.common.dto.shared.OrchestrationResultDTO;
import eu.arrowhead.common.dto.shared.ServiceInterfaceResponseDTO;
import eu.arrowhead.common.dto.shared.ServiceQueryFormDTO;
import eu.arrowhead.common.exception.InvalidParameterException;
import java.io.IOException;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

@SpringBootApplication
@ComponentScan(basePackages = {CommonConstants.BASE_PACKAGE, "eu.arrowhead", "ai.aitia"})
public class ${sysName}ConsumerMain implements ApplicationRunner {
    
    //=================================================================================================
	// members
	
    @Autowired
	private ArrowheadService arrowheadService;
    
    @Autowired
	protected SSLProperties sslProperties;
    
    private final Logger logger = LogManager.getLogger(${sysName}ConsumerMain.class);
    
    //=================================================================================================
	// methods

	//------------------------------------------------------------------------------------------------
    public static void main( final String[] args ) {
    	SpringApplication.run(${sysName}ConsumerMain.class, args);
    }

    //-------------------------------------------------------------------------------------------------
   @Override
	public void run(final ApplicationArguments args) throws Exception {
	#foreach( $interface in $interfaces )
	#set($operations=$interface.getOperations())
	#foreach( $operation in $operations  )
    	$interface.getID()_$operation.getOpName()_Consumption();
    #end
    #end
	}
	
		#set($GET=0)
		#set($POST=0)
    
	#foreach( $interface in $interfaces )
	#set($operations=$interface.getOperations())
	#foreach( $operation in $operations )
    //-------------------------------------------------------------------------------------------------
    public void $interface.getID()_$operation.getOpName()_Consumption() {
    	logger.info("Orchestration request for " + "$interface.getID()" + " service:");
    	final ServiceQueryFormDTO serviceQueryForm = new ServiceQueryFormDTO.Builder("$interface.getID()").interfaces(getInterface()).build();
    	
		final Builder orchestrationFormBuilder = arrowheadService.getOrchestrationFormBuilder();
		final OrchestrationFormRequestDTO orchestrationFormRequest = orchestrationFormBuilder.requestedService(serviceQueryForm)
																					   .flag(Flag.MATCHMAKING, false)
																					   .flag(Flag.OVERRIDE_STORE, true)
																					   .build();
		
		printOut(orchestrationFormRequest);		
		
		final OrchestrationResponseDTO orchestrationResponse = arrowheadService.proceedOrchestration(orchestrationFormRequest);
		
		logger.info("Orchestration response:");
		printOut(orchestrationResponse);		
		
		if (orchestrationResponse == null) {
			logger.info("No orchestration response received");
		} else if (orchestrationResponse.getResponse().isEmpty()) {
			logger.info("No provider found during the orchestration");
		} else {
			final OrchestrationResultDTO orchestrationResult = orchestrationResponse.getResponse().get(0);
			validateOrchestrationResult(orchestrationResult, "$interface.getID()");
			
		 try{ 
			
			#if($operation.getMethod() == "GET")
			String result= sendGet("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri()+"$operation.getPathResource()");
			#set($GET=$GET+1)
			#elseif($operation.getMethod()== "POST")
			#set($POST=$POST+1)
			#if($operation.getMediatype_request()=="CBOR")
				//PAYLOAD
				 	CBORFactory f = new CBORFactory();
            		ObjectMapper mapper = new ObjectMapper(f);
            		$operation.getOpNameCapitalize()RequestDTO request = new $operation.getOpNameCapitalize()RequestDTO();
					byte[] payload=mapper.writeValueAsBytes(request);
				// SERVICE CONSUMPTION	
					byte[] result= sendPost_Bytes("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri()+"$operation.getPathResource()",payload);
				#elseif($operation.getMediatype_request()=="JSON")
				//PAYLOAD
					JsonFactory jsonFactory_objMapper = new JsonFactory();
        			ObjectMapper objMapper=new ObjectMapper(jsonFactory_objMapper);
					$operation.getOpNameCapitalize()RequestDTO request = new $operation.getOpNameCapitalize()RequestDTO();
					String payload=objMapper.writeValueAsString(request);
				// SERVICE CONSUMPTION	
					String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri()+"$operation.getPathResource()",payload);
				#elseif($operation.getMediatype_request()=="XML")
				//PAYLOAD
					ObjectMapper objMapper=new XmlMapper();
					$operation.getOpNameCapitalize()RequestDTO request = new $operation.getOpNameCapitalize()RequestDTO();
					String payload=objMapper.writeValueAsString(request);
				// SERVICE CONSUMPTION	
					String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri()+"$operation.getPathResource()",payload);
				#else 
				//TODO PAYLOAD 
				// SERVICE CONSUMPTION	
					String result= sendPost("http://"+orchestrationResult.getProvider().getAddress()+":"+orchestrationResult.getProvider().getPort()+"/"+orchestrationResult.getServiceUri()+"$operation.getPathResource()",payload);	
				#end
				
			
			
			#else
   				//TODO PUT and DELETE methods
			#end
			}catch (Exception e) {
              e.printStackTrace();
               }	
			
		}
    }
    
    
    
    
    #if($operation.getMethod()== "GET")
    
	#if($GET==1)
	//SERVICE CONSUMPTION METHOD
	private static String sendGet(String url) throws IOException {
        
    	 CloseableHttpClient httpClient = HttpClients.createDefault();
    	 String result="";
        
        try {

            HttpGet request = new HttpGet(url);
			CloseableHttpResponse response = httpClient.execute(request);

            try {
				 HttpEntity entity = response.getEntity();
				 
                	if (entity != null) {
                    // return it as a String
                     result = EntityUtils.toString(entity);
                    System.out.println(result);
                }

            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
    #end
	#elseif($operation.getMethod() == "POST")
	#if($POST==1)
	//SERVICE CONSUMPTION METHOD
		 #if( $operation.getMediatype_request()== "CBOR")
		 private static  byte[] sendPost_Bytes(String url, byte[]  payload) throws IOException {

        CloseableHttpClient httpClient = HttpClients.createDefault();
        byte[] result;
        
        try {

            HttpPost request = new HttpPost(url);

       // add request headers
            request.addHeader("content-type", "application/cbor");
             
        // send a CBOR data
        
          	EntityBuilder eb = EntityBuilder.create();
            eb.setBinary(payload);
            request.setEntity(eb.build());
            CloseableHttpResponse response = httpClient.execute(request);
           
            try {

               
                System.out.println(response.getStatusLine().toString());        // HTTP/1.1 200 OK

                HttpEntity entity = response.getEntity();
                if (entity != null) { 
                     result = EntityUtils.toByteArray(entity);
                    System.out.println("Response:" +result.toString());
            
                    
                }

            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
        
		 
		 #else	
		private static String sendPost(String url, String payload) throws IOException {

        CloseableHttpClient httpClient = HttpClients.createDefault();
        String result = "";
        
        try {

            HttpPost request = new HttpPost(url);

       // add request headers
       
 			request.addHeader("content-type", "application/$operation.getMediatype_request().toLowerCase()");
             
        // send a $operation.getMediatype_request() data
        
        
            request.setEntity(new StringEntity(payload.toString()));
            CloseableHttpResponse response = httpClient.execute(request);
           
            try {

              
                System.out.println(response.getStatusLine().toString());        // HTTP/1.1 200 OK

                HttpEntity entity = response.getEntity();
                if (entity != null) {
                    // return it as a String
                     result = EntityUtils.toString(entity);
                   System.out.println("Response:" +result);
                }

            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
        
		#end
		#end		
	#else
	//SERVICE CONSUMPTION METHOD
   		//TODO PUT and DELETE methods 
	#end
  
	#end 
 	#end 
 
    
    //=================================================================================================
	// assistant methods
    
    //-------------------------------------------------------------------------------------------------
    private String getInterface() {
    	return sslProperties.isSslEnabled() ? "HTTPS-SECURE-JSON" : "HTTP-INSECURE-JSON";
    }
    //-------------------------------------------------------------------------------------------------
    private void validateOrchestrationResult(final OrchestrationResultDTO orchestrationResult, final String serviceDefinitin) {
    	if (!orchestrationResult.getService().getServiceDefinition().equalsIgnoreCase(serviceDefinitin)) {
			throw new InvalidParameterException("Requested and orchestrated service definition do not match");
		}
    	
    	boolean hasValidInterface = false;
    	for (final ServiceInterfaceResponseDTO serviceInterface : orchestrationResult.getInterfaces()) {
			if (serviceInterface.getInterfaceName().equalsIgnoreCase(getInterface())) {
				hasValidInterface = true;
				break;
			}
		}
    	if (!hasValidInterface) {
    		throw new InvalidParameterException("Requested and orchestrated interface do not match");
		}
    }
    
    //-------------------------------------------------------------------------------------------------
    private void printOut(final Object object) {
    	System.out.println(Utilities.toPrettyJson(Utilities.toJson(object)));
    }
}