package eu.arrowhead.${packagename};

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.HttpMethod;



import eu.arrowhead.client.library.ArrowheadService;
import eu.arrowhead.common.CommonConstants;
import eu.arrowhead.common.SSLProperties;
import eu.arrowhead.common.Utilities;
import eu.arrowhead.common.dto.shared.OrchestrationFlags.Flag;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO;
import eu.arrowhead.common.dto.shared.OrchestrationFormRequestDTO.Builder;
import eu.arrowhead.common.dto.shared.OrchestrationResponseDTO;
import eu.arrowhead.common.dto.shared.OrchestrationResultDTO;
import eu.arrowhead.common.dto.shared.ServiceInterfaceResponseDTO;
import eu.arrowhead.common.dto.shared.ServiceQueryFormDTO;
import eu.arrowhead.common.exception.InvalidParameterException;

@SpringBootApplication
@ComponentScan(basePackages = {CommonConstants.BASE_PACKAGE, "eu.arrowhead"})
public class ${sysName}ConsumerMain implements ApplicationRunner {
    
    //=================================================================================================
	// members
	
    @Autowired
	private ArrowheadService arrowheadService;
    
    @Autowired
	protected SSLProperties sslProperties;
    
    private final Logger logger = LogManager.getLogger(${sysName}ConsumerMain.class);
    
    //=================================================================================================
	// methods

	//------------------------------------------------------------------------------------------------
    public static void main( final String[] args ) {
    	SpringApplication.run(${sysName}ConsumerMain.class, args);
    }

    //-------------------------------------------------------------------------------------------------
    @Override
	public void run(final ApplicationArguments args) throws Exception {
    	${serviceName}Consumption();
    	
	}
    
    //-------------------------------------------------------------------------------------------------
    public void ${serviceName}Consumption() {
    	logger.info("Orchestration request for " + ${serviceDefinition} + " service:");
    	final ServiceQueryFormDTO serviceQueryForm = new ServiceQueryFormDTO.Builder(${serviceDefinition}
    																		.interfaces(getInterface())
    																		.build();
    	
		final Builder orchestrationFormBuilder = arrowheadService.getOrchestrationFormBuilder();
		final OrchestrationFormRequestDTO orchestrationFormRequest = orchestrationFormBuilder.requestedService(serviceQueryForm)
																					   .flag(Flag.MATCHMAKING, false)
																					   .flag(Flag.OVERRIDE_STORE, true)
																					   .build();
		
		printOut(orchestrationFormRequest);		
		
		final OrchestrationResponseDTO orchestrationResponse = arrowheadService.proceedOrchestration(orchestrationFormRequest);
		
		logger.info("Orchestration response:");
		printOut(orchestrationResponse);		
		
		if (orchestrationResponse == null) {
			logger.info("No orchestration response received");
		} else if (orchestrationResponse.getResponse().isEmpty()) {
			logger.info("No provider found during the orchestration");
		} else {
			final OrchestrationResultDTO orchestrationResult = orchestrationResponse.getResponse().get(0);
			validateOrchestrationResult(orchestrationResult, ${serviceDefinition});
			
			#if($method == "GET")
			String result= sendGET(${address});
			#elseif($method == "POST")
				#if($ecoding=="CBOR")
				//PAYLOAD
				 	CBORFactory f = new CBORFactory();
            		ObjectMapper mapper = new ObjectMapper(f);
            		RequestDTO_C0 request = new RequestDTO_C0();
					byte[] payload=mapper.writeValueAsBytes(request);
				#elseif($encoding=="JSON")
				//PAYLOAD
					JsonFactory jsonFactory_objMapper = new JsonFactory();
        			ObjectMapper objMapper=new ObjectMapper(jsonFactory_objMapper);
					RequestDTO_C0 request = new RequestDTO_C0();
					String payload=objMapper.writeValueAsString(request);
				#elseif($encoding=="XML")
				//PAYLOAD
					ObjectMapper objMapper=new XmlMapper();
					RequestDTO_C0 request = new RequestDTO_C0();
					String payload=objMapper.writeValueAsString(request);
				#else 
					//TODO PAYLOAD 	
				#end
				// SERVICE CONSUMPTION	
			String result= sendPost(${address},payload);
			#else
   				//TODO PUT and DELETE methods
			#end
		}
    }
    
    
    //SERVICE CONSUMPTION METHOD
    #if($method == "GET")
		
	private static String sendGET(String url) throws IOException {
        
    	 CloseableHttpClient httpClient = HttpClients.createDefault();
    	 String result="";
        
        try {

            HttpGet request = new HttpGet(url);
			CloseableHttpResponse response = httpClient.execute(request);

            try {
				 HttpEntity entity = response.getEntity();
				 
                	if (entity != null) {
                    // return it as a String
                     result = EntityUtils.toString(entity);
                    System.out.println(result);
                }

            } finally {
                response.close();
            }
        } finally {
            httpClient.close();
        }
    
        return result;
    }
	#elseif($method == "POST")
			
	#else
   		//TODO PUT and DELETE methods
	#end
   
    
    //=================================================================================================
	// assistant methods
    
    //-------------------------------------------------------------------------------------------------
    private String getInterface() {
    	return sslProperties.isSslEnabled() ? CarConsumerConstants.INTERFACE_SECURE : CarConsumerConstants.INTERFACE_INSECURE;
    }
    
    //-------------------------------------------------------------------------------------------------
    private void validateOrchestrationResult(final OrchestrationResultDTO orchestrationResult, final String serviceDefinitin) {
    	if (!orchestrationResult.getService().getServiceDefinition().equalsIgnoreCase(serviceDefinitin)) {
			throw new InvalidParameterException("Requested and orchestrated service definition do not match");
		}
    	
    	boolean hasValidInterface = false;
    	for (final ServiceInterfaceResponseDTO serviceInterface : orchestrationResult.getInterfaces()) {
			if (serviceInterface.getInterfaceName().equalsIgnoreCase(getInterface())) {
				hasValidInterface = true;
				break;
			}
		}
    	if (!hasValidInterface) {
    		throw new InvalidParameterException("Requested and orchestrated interface do not match");
		}
    }
    
    //-------------------------------------------------------------------------------------------------
    private void printOut(final Object object) {
    	System.out.println(Utilities.toPrettyJson(Utilities.toJson(object)));
    }
}